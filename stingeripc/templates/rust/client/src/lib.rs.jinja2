/*
DO NOT MODIFY THIS FILE.  It is automatically generated and changes will be over-written
on the next generation.

This is the Client for the {{stinger.name}} interface.
*/

use futures::StreamExt;
use connection::Connection;

pub struct {{stinger.name}}Client {
    connection: Connection,
    {%for sig_name in stinger.signals.keys()-%}
        signal_recv_callback_for_{{sig_name}}: Box<dyn FnMut(u32)->()>,
    {%endfor%}
}

impl {{stinger.name}}Client {
    pub fn new(connection: Connection) -> {{stinger.name}}Client {

        {{stinger.name}}Client {
            connection: connection,
            {%for sig_name in stinger.signals.keys()-%}
            signal_recv_callback_for_{{sig_name}}: Box::new( |_| {} ),
            {%endfor%}
        }
    }

    {%for sig_name in stinger.signals.keys()-%}
    pub fn set_signal_recv_callbacks_for_{{sig_name}}(&mut self, cb: impl FnMut(u32)->() + 'static) {
        self.signal_recv_callback_for_{{sig_name}} = Box::new(cb);
        self.connection.subscribe(String::from("{{sig.topic}}"));
    }
    {%endfor%}

    pub async fn process(&mut self) {
        while let Some(opt_msg) = self.connection.rx.next().await {
            if let Some(msg) = opt_msg {
                {%for sig_name in stinger.signals.keys()-%}
                if msg.topic() == "{{sig.topic}}" {
                    (signal_recv_callback_for_{{sig_name}})(1);
                }
                {%endfor%}
            }
        }
    }
}
