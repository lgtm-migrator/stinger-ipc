use futures::{executor::block_on};
use {{stinger.name | snake_case}}_client::{{stinger.name}}Client;
use connection::Connection;

{%for sig_name, sig in stinger.signals.items()%}
fn print_{{sig_name|snake_case}}({%for arg in sig.arg_list%}{{arg.name|snake_case}}: {{arg.rust_type}}{%if not loop.last%}, {%endif%}{%endfor%}) {
    println!("Got a '{{sig_name}}' signal:{%for arg in sig.arg_list%}{} {%endfor%}", {%for arg in sig.arg_list%}{{arg.name|snake_case}}{%if not loop.last%}, {%endif%}{%endfor%});
}
{%endfor%}

fn main() {
    {%set broker = stinger.get_example_broker()%}
    let connection = Connection::new(String::from("tcp://{%if broker.hostname is none%}localhost{%else%}{{broker.hostname}}{%endif%}:1883"));
    let mut client = {{stinger.name}}Client::new(connection);
    {%for sig_name, sig in stinger.signals.items()%}
    client.set_signal_recv_callbacks_for_{{sig_name|snake_case}}(print_{{sig_name|snake_case}});
    {%endfor%}
    block_on(async {
        client.process().await;
    });
    // Ctrl-C to stop
}
