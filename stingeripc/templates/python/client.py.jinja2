"""
DO NOT MODIFY THIS FILE.  It is automatically generated and changes will be over-written
on the next generation.

This is the Client for the {{stinger.name}} interface.
"""

from typing import Dict, Callable, List, Any
import json
from connection import MqttConnection
{%if stinger.uses_enums()%}import {{stinger.get_enum_module_name()}} as {{stinger.get_enum_module_alias()}}{%endif%}

class {{stinger.name}}Client(object):

    def __init__(self, connection: MqttConnection):
        self._conn = connection
        self._conn.set_message_callback(self._receive_message)
        {%for p,v in stinger.params.items()-%}
        self._{{p}} = {{v.payload.initialValue}}
        self._conn.subscribe("{{topics.get_param_value(stinger.name, false, p)}}", self.set_{{p}})
        self.changed_value_callback_for_{{p}} = None
        {%endfor%}
        {%for sig_name in stinger.signals.keys()-%}
        self._signal_recv_callbacks_for_{{sig_name}} = []
        {%endfor%}
        {%for sig_name, sig in stinger.signals.items()-%}
        self._conn.subscribe("{{sig.topic}}")
        {%endfor%}

    def _do_callbacks_for(self, callbacks: Dict[str, Callable], **kwargs):
        for cb in callbacks:
            cb(**kwargs)

    @staticmethod
    def _filter_for_args(args: Dict[str, Any], allowed_args: List[str]) -> Dict[str, Any]:
        filtered_args = {}
        for k, v in args.items():
            if k in allowed_args:
                filtered_args[k] = v
        return filtered_args

    def _receive_message(self, topic, payload):
        {%for sig_name, sig in stinger.signals.items()-%}
        {%if not loop.first%}el{%endif%}if self._conn.is_topic_sub(topic, "{{sig.topic}}"):
            allowed_args = [{%for arg in sig.arg_list%}"{{arg.name}}", {%endfor%}]
            kwargs = self._filter_for_args(json.loads(payload), allowed_args)
            self._do_callbacks_for(self._signal_recv_callbacks_for_{{sig_name}}, **kwargs)
        {%endfor%}

    {%for sig_name, sig in stinger.signals.items()%}
    def receive_{{sig_name}}(self, handler):
        self._signal_recv_callbacks_for_{{sig_name}}.append(handler)
    {%endfor%}

if __name__ == '__main__':
    import signal

    conn = MqttConnection('localhost', 1883)
    client = {{stinger.name}}Client(conn)

    {%for sig_name, sig in stinger.signals.items()%}
    @client.receive_{{sig_name}}
    def print_{{sig_name}}_receipt({%for arg in sig.arg_list%}{{arg.name}}: {{arg.python_type}}{%if not loop.last%}, {%endif%}{%endfor%}):
        """{{sig.description}}
        {%for arg in sig.arg_list-%}
        @param {{arg.name}} {{arg.python_type}} {{arg.description or ''}}
        {%endfor%}"""
        print(f"Got a '{{sig_name}}' signal")
    {%endfor%}
    
    print("Ctrl-C will stop the program.")
    signal.pause()
