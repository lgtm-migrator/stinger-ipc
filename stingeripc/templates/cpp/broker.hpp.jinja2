
#pragma once

#include <mosquitto.h>
#include <queue>
#include <boost/interprocess/sync/scoped_lock.hpp>
#include <boost/thread/mutex.hpp>

#include "ibrokerconnection.hpp"

/*! This class presents a connection to a MQTT broker.
 */
class BrokerConnection : public IBrokerConnection
{
public:

    /*! Constructor for a BrokerConnection.
     */
    BrokerConnection();

    virtual ~BrokerConnection();

    /*! Publish a message to the MQTT broker.
     * \param topic the topic of the message.
     * \param payload is the payload body of the message.
     * \param qos the MQTT quality of service value between 0 and 2 inclusive.
     * \param retain an indicator that the MQTT broker should retain the message.
     */
    virtual void Publish(const std::string& topic, const std::string& payload, unsigned qos, bool retain);

    /*! Subscribe to a topic.
     * \param topic the subscription topic.
     * \param qos an MQTT quality of service value between 0 and 2 inclusive.
     */
    virtual void Subscribe(const std::string& topic, int qos);

    /*! Add a function that is called on the receipt of a message.
     * Many callbacks can be added, and each will be called in the order in which the callbacks were added.
     * \param cb the callback function.
     */
    virtual void AddMessageCallback(const std::function<void(const std::string&, const std::string&)>& cb);

    /*! Determines if a topic string matches a subscription topic.
     * \param topic a topic to match against a subscription.
     * \param subscr the subscription topic string to match against.
     * \return true if it is a match.
     */
    virtual bool TopicMatchesSubscription(const std::string& topic, const std::string& subscr) const;

protected:
    /*! Establishes the connection to the broker.
     */
    virtual void Connect();


private:
    class MqttMessage
    {
    public:
        MqttMessage(const std::string& topic, const std::string& payload, int qos, bool retain) : _topic(topic), _payload(payload), _qos(qos), _retain(retain) {}
        virtual ~MqttMessage() = default;
        std::string _topic;
        std::string _payload;
        int _qos;
        bool _retain;
    };

    struct MqttSubscription
    {
        MqttSubscription(const std::string& topic, int qos) : _topic(topic), _qos(qos) {}
        ~MqttSubscription() = default;
        std::string _topic;
        int _qos;
    };

    mosquitto *_mosq;
    std::string _host;
    int _port;
    std::string _clientId;
    std::queue<MqttSubscription> _subscriptions;
    boost::mutex _mutex;
    std::vector<std::function<void(const std::string&, const std::string&)>> _messageCallbacks;
    std::queue<MqttMessage> _msgQueue;
};

